// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/domain/module/api/v1/command.proto

package module_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Readme

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := ModuleValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := ModuleValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	if len(m.GetTags()) < 1 {
		err := ModuleValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on CreateAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateActionMultiError, or
// nil if none found.
func (m *CreateAction) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepo()) < 1 {
		err := CreateActionValidationError{
			field:  "Repo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAction_Version_Pattern.MatchString(m.GetVersion()) {
		err := CreateActionValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"v[0-9]+.[0-9]+.[0-9]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModule() == nil {
		err := CreateActionValidationError{
			field:  "Module",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateActionValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateActionValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateActionValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSparks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateActionValidationError{
						field:  fmt.Sprintf("Sparks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateActionValidationError{
						field:  fmt.Sprintf("Sparks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateActionValidationError{
					field:  fmt.Sprintf("Sparks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateActionMultiError(errors)
	}

	return nil
}

// CreateActionMultiError is an error wrapping multiple validation errors
// returned by CreateAction.ValidateAll() if the designated constraints aren't met.
type CreateActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateActionMultiError) AllErrors() []error { return m }

// CreateActionValidationError is the validation error returned by
// CreateAction.Validate if the designated constraints aren't met.
type CreateActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActionValidationError) ErrorName() string { return "CreateActionValidationError" }

// Error satisfies the builtin error interface
func (e CreateActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActionValidationError{}

var _CreateAction_Version_Pattern = regexp.MustCompile("v[0-9]+.[0-9]+.[0-9]+")

// Validate checks the field values on CreateGlobalCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGlobalCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGlobalCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGlobalCommandMultiError, or nil if none found.
func (m *CreateGlobalCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGlobalCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repo

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGlobalCommandValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGlobalCommandValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGlobalCommandValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGlobalCommandMultiError(errors)
	}

	return nil
}

// CreateGlobalCommandMultiError is an error wrapping multiple validation
// errors returned by CreateGlobalCommand.ValidateAll() if the designated
// constraints aren't met.
type CreateGlobalCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGlobalCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGlobalCommandMultiError) AllErrors() []error { return m }

// CreateGlobalCommandValidationError is the validation error returned by
// CreateGlobalCommand.Validate if the designated constraints aren't met.
type CreateGlobalCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGlobalCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGlobalCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGlobalCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGlobalCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGlobalCommandValidationError) ErrorName() string {
	return "CreateGlobalCommandValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGlobalCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGlobalCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGlobalCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGlobalCommandValidationError{}

// Validate checks the field values on AddSparkGlobalCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSparkGlobalCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSparkGlobalCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSparkGlobalCommandMultiError, or nil if none found.
func (m *AddSparkGlobalCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSparkGlobalCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repo

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetSpark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddSparkGlobalCommandValidationError{
					field:  "Spark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddSparkGlobalCommandValidationError{
					field:  "Spark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSparkGlobalCommandValidationError{
				field:  "Spark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddSparkGlobalCommandMultiError(errors)
	}

	return nil
}

// AddSparkGlobalCommandMultiError is an error wrapping multiple validation
// errors returned by AddSparkGlobalCommand.ValidateAll() if the designated
// constraints aren't met.
type AddSparkGlobalCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSparkGlobalCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSparkGlobalCommandMultiError) AllErrors() []error { return m }

// AddSparkGlobalCommandValidationError is the validation error returned by
// AddSparkGlobalCommand.Validate if the designated constraints aren't met.
type AddSparkGlobalCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSparkGlobalCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSparkGlobalCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSparkGlobalCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSparkGlobalCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSparkGlobalCommandValidationError) ErrorName() string {
	return "AddSparkGlobalCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AddSparkGlobalCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSparkGlobalCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSparkGlobalCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSparkGlobalCommandValidationError{}

// Validate checks the field values on MarkAsOutdatedCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkAsOutdatedCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkAsOutdatedCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkAsOutdatedCommandMultiError, or nil if none found.
func (m *MarkAsOutdatedCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkAsOutdatedCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkAsOutdatedCommandMultiError(errors)
	}

	return nil
}

// MarkAsOutdatedCommandMultiError is an error wrapping multiple validation
// errors returned by MarkAsOutdatedCommand.ValidateAll() if the designated
// constraints aren't met.
type MarkAsOutdatedCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkAsOutdatedCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkAsOutdatedCommandMultiError) AllErrors() []error { return m }

// MarkAsOutdatedCommandValidationError is the validation error returned by
// MarkAsOutdatedCommand.Validate if the designated constraints aren't met.
type MarkAsOutdatedCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkAsOutdatedCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkAsOutdatedCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkAsOutdatedCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkAsOutdatedCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkAsOutdatedCommandValidationError) ErrorName() string {
	return "MarkAsOutdatedCommandValidationError"
}

// Error satisfies the builtin error interface
func (e MarkAsOutdatedCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkAsOutdatedCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkAsOutdatedCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkAsOutdatedCommandValidationError{}
